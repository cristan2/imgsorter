# Configuration file for imgsorter
# https://github.com/cristan2/rust-utils/tree/master/imgsorter
# Based on the TOML format: https://toml.io/en/

[folders]

# (MANDATORY)
# This are the folders where the images and other files to be sorted are located.
# If this option is missing, the program will exit.
# See also option `source_recursive`:
# - if it is true, then all folders contained within these folders will also be read
# - if it is false or missing, all subfolders will be ignored
source_dirs = [
#  'D:\Temp\New folder test remove - Copy',
  'D:\Temp\New folder test remove - Copy 2',
  'D:\Temp\New folder test remove - Copy 2 - Copy',
  'invalid_folder'
]

# The destination folder for the sorted files.
# If the destination folder does not exist, it will be created.
# If the destination folder exists, a subfolder called "imgsorted" will be created inside and used.
# If this option is missing, the directory from which the program is launched will be used.
target_dir = 'D:\Temp\New folder test remove - Copy'

# There must be at least this number of files for any given date
#   for a dedicated target date folder to be created. Otherwise, a separate
#   single folder will be created to hold all these files ("one-offs") together.
# This doesn't apply to target date folders which will contain images from at least two devices.
# See also the target_oneoffs_subdir_name option.
# Setting it to 0 or 1 will effectively disable this functionality
# If this option is missing, the default "1" will be used.
min_files_per_dir = 2

# When sorting a large number of files, set this property to a number
#  higher than zero to print a more compact output during dry runs.
# This is done by truncating the output of consecutive files in the same folder
#  with the same status which exceed this exceeding this number.
# Example output if this is disabled:
#   ├── IMG-20190128.jpg <--- D:\Pics\IMG-20190128.jpg ........... target file exists, will be skipped
#   ├── IMG-20190128.jpg <--- D:\Pics\Sort me\IMG-20190128.jpg ... target file exists, will be skipped
#   ├── IMG-20190128.jpg <--- D:\Pics\More\IMG-20190128.jpg ...... target file exists, will be skipped
#   └── IMG-20190129.jpg <--- D:\Pics\IMG-20190129.jpg ........... file will be copied
# Example output if this is enabled:
#   ├── IMG-20190128.jpg <--- D:\Pics\IMG-20190128.jpg ... target file exists, will be skipped
#   ·-- (snipped output for 2 files with same status)
#   └── IMG-20190129.jpg <--- D:\Pics\IMG-20190129.jpg ... file will be copied
# If this option is missing or set to 0, no truncating will occur
min_files_before_compacting_output = 0

# The name of the folder which will hold all files for any given date,
#   which holds less than or equal the [min_files_per_dir] threshold.
# If this option is missing, the default 'Miscellaneous' will be used.
target_oneoffs_subdir_name = 'Miscellaneous'

[options]

# Whether to do a simulation of the process, without writing any files.
# This will display additional information, like the resulting dir structure,
#   including the total number of devices, files and file size.
# If this option is missing, the default "false" will be used.
dry_run = false

# Whether to print additional information during processing
verbose = false

# Whether to align file lists for pretty outputs
# Disable this if output is too wide for your screen
# Example output if true:
#  [2015.10.04] (1 device, 2 files, 1.34 MB)  ............................ [new folder will be created]
#   └── IMG_0001.JPG <--------- E:\Pics\IMG_0001.JPG ...................... file will be copied
#   └── IMG_0002_0943a.JPG <--- E:\Pics\To sort\New folder\IMG_0002.JPG ... duplicate source file, will be skipped
# Example output if false:
#  [2015.10.04] (1 device, 2 files, 1.34 MB)  ...  [new folder will be created]
#   └── IMG_0001.JPG <--- E:\Pics\IMG_0001.JPG ... file will be copied
#   └── IMG_0002.JPG_0943a <--- E:\Pics\To sort\New folder\IMG_0002.JPG ... duplicate source file, will be skipped
# If this option is missing, the default "true" will be used.
align_file_output = true

# Whether to create a device subfolder even if there only a single one
#  or when the file's device can't be read (if it's missing or is an unsupported file type)
# If this option is missing, the default "false" will be used
always_create_device_subdirs = false

# Whether to read any subfolders in the source folders.
# If this is true, the program will successively read all subfolders
#  inside the configured source folders, including subfolders of subfolders.
# If this is false, any subfolders inside the configured source folders will be ignored.
# If this option is missing, the default "false" will be used.
source_recursive = true

# Whether to also read device Make information from EXIF in addition to the device name (which is always read)
# from supported files. The device make will pe prepended to the device name
#   e.g. "Samsung SM-A415F", where Samsung is the Make, and SM-A415F is the Model
# If this option is missing, the default "true" will be used.
include_device_make = true

# Whether files are copied instead of moved to the destination folder.
# If this option is true or missing, files will be *copied* to
#  the destination and the source files will be left untouched.
# If this option is false, files are copied to the destination then DELETED from the source.
copy_not_move = true

# Whether to ask for user confirmation before processing files.
# If this option is missing, the default "false" will be used.
# !! Be careful when using this when "copy_no_move" is true, as files will be moved without confirmation.
silent = false

[custom]

# Replace device names as retrieved from EXIF info where available
#  (camera model prepended by camera make if `include_device_make` is true)
#  with custom names for better clarity.
# For example, setting a value of 'Samsung SM-A415F'="Maria's phone"
#  will create a folder named "Maria's phone" instead of "Samsung SM-A415F"
[custom.devices]
#'HUAWEI VNS-L21'="Huawei P9 Lite"
#'Samsung SM-A415F'="Maria's phone"
#'SM-A415F'="Samsung A41"

# Additional file extensions to be recognized and processed
# Note: these are not supported and only basic metadata
# will be available (i.e. modified date)
[custom.extensions]
image = [ ]
video = [ ]
audio = [ "m4a" ]